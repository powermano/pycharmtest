class Solution:
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        row = len(matrix)
        if row == 0: return 0
        column = len(matrix[0])
        number = []
        for i in range(row):
            number.append(self.dp_one(matrix[i]))

        dp_row = [[0] * column for i in range(row)]
        dp_column = [[0] * column for i in range(row)]
        max_value = 0
        for j in range(column):
            if matrix[0][j] == '1':
                dp_row[0][j] = number[0][j]
                dp_column[0][j] = 1
                max_value = max(max_value, dp_row[0][j] * dp_column[0][j])
        for i in range(1, row):
            for j in range(column):
                if matrix[i][j] == '0':
                    dp_row[i][j] = 0
                    dp_column[i][j] = 0
                else:
                    if dp_row[i - 1][j] == 0:
                        dp_row[i][j] = number[i][j]
                        dp_column[i][j] = 1
                    else:
                        dp_row[i][j] = min(dp_row[i - 1][j], number[i][j])
                        dp_column[i][j] = dp_column[i - 1][j] + 1

                if number[i][j] > (dp_row[i][j] * dp_column[i][j]):
                    dp_row[i][j] = number[i][j]
                    dp_column[i][j] = 1
                max_value = max(max_value, dp_row[i][j] * dp_column[i][j])
        return max_value

    def dp_one(self, n):
        dp = [0] * len(n)
        if len(n) == 0: return 0
        if n[0] == '1':
            dp[0] = 1
        else:
            dp[0] = 0
        for i in range(1, len(n)):
            if n[i] == '0':
                dp[i] = 0
            else:
                dp[i] = dp[i - 1] + 1
        return dp

import numpy as np
class Solution1:
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        row = len(matrix)
        if row == 0: return 0
        column = len(matrix[0])
        number1 = []
        for i in range(row):
            number1.append(self.dp_one(matrix[i]))

        number2 = [[0] * column for i in range(row)]
        for i in range(column):
            for j in range(row):
                number2[j][i] = self.dp_one([x[i] for x in matrix])[j]

        dp_row = [[0] * column for i in range(row)]
        dp_column = [[0] * column for i in range(row)]
        max_value = 0
        for j in range(column):
            if matrix[0][j] == '1':
                dp_row[0][j] = number1[0][j]
                dp_column[0][j] = 1
                max_value = max(max_value, dp_row[0][j] * dp_column[0][j])
        for i in range(row):
            if matrix[i][0] == '1':
                dp_row[i][0] = 1
                dp_column[i][0] = number2[i][0]
                max_value = max(max_value, dp_row[i][0] * dp_column[i][0])
        for i in range(1, row):
            for j in range(1, column):
                temp = 0
                if matrix[i][j] == '0':
                    dp_row[i][j] = 0
                    dp_column[i][j] = 0
                else:
                    if dp_row[i - 1][j] == 0:
                        if dp_row[i][j - 1] == 0:
                            dp_row[i][j] = 1
                            dp_column[i][j] = 1
                        else:
                            dp_column[i][j] = min(dp_column[i][j - 1], number2[i][j])
                            dp_row[i][j] = dp_row[i][j - 1] + 1
                    else:
                        if dp_row[i][j - 1] == 0:
                            dp_row[i][j] = min(dp_row[i - 1][j], number1[i][j])
                            dp_column[i][j] = dp_column[i - 1][j] + 1
                        else:
                            dp_row[i][j] = min(dp_row[i - 1][j], number1[i][j])
                            dp_column[i][j] = dp_column[i - 1][j] + 1
                            temp = dp_row[i][j] * dp_column[i][j]
                            temp_column = min(dp_column[i][j - 1], number2[i][j])
                            temp_row = dp_row[i][j - 1] + 1
                            if (temp_row * temp_column) > temp:
                                dp_row[i][j] = temp_row
                                dp_column[i][j] = temp_column
                if number1[i][j] > (dp_row[i][j] * dp_column[i][j]):
                    dp_row[i][j] = number1[i][j]
                    dp_column[i][j] = 1
                if number2[i][j] > (dp_row[i][j] * dp_column[i][j]):
                    dp_row[i][j] = 1
                    dp_column[i][j] = number2[i][j]
                max_value = max(max_value, dp_row[i][j] * dp_column[i][j])
        return max_value, np.array(dp_row) * np.array(dp_column)

    def dp_one(self, n):
        dp = [0] * len(n)
        if len(n) == 0: return 0
        if n[0] == '1':
            dp[0] = 1
        else:
            dp[0] = 0
        for i in range(1, len(n)):
            if n[i] == '0':
                dp[i] = 0
            else:
                dp[i] = dp[i - 1] + 1
        return dp


a = Solution1()
test = [["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","0","1","1","0","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","1","1"],["0","1","1","0","1","1","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","0","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","0","0","1","1","0","0","1","1","0","1","1","0","1","0","1","0","1"],["1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","0","1","0","1","1","0","1","0","1","1"],["1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","1"],["1","1","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","1","1","1","0","0","1","1","1","1","1"],["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"],["1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1"],["1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","1","1"],["1","1","0","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1"],["1","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","0","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1"],["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","0","1","1","0","1","1"],["1","1","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","0","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","0","1","0","1","1","0","1","1","1","1","1","1","1","1"],["1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1"],["1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1"],["0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","0","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","0","1","1","1","1"],["1","1","0","1","1","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","0","1","0","0"],["0","1","1","0","1","1","1","1","1","1","1","0","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","0","1","1","0","1","1","1","0","1"]]
b,c = a.maximalRectangle(test)
print(b)
print(c)

